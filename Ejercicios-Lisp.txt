;Definir la función cuadrado de un número

(defun cuadrado (n) (* n n))
>(cuadrado 3)
9
;----------------------------
;----------------------------

;Definir funcion cubo de exponente cúbico			   

(defun cubico (n) (expt n 3))
> (cubico 5) 
125          

;----------------------------
;----------------------------

;definicion de la funcion suma
(defun suma (a b) (+ a b))
> (suma 2 3)
5           

;----------------------------
;----------------------------

;definir una funcion que resuelva el polinomio ax2+bx+c
(defun polinomio (a b c x) (+ (* a x x) (* b x) c))
> (polinomio 1 2 3 4) 
27                    

;----------------------------
;----------------------------

;definir funcion 'cuadradoMedia' que devuelva el cuadrado de la media entre a y b
(defun cuadradoMedia (a b) (cuadrado (/ (+ a b) 2)))
> (cuadradomedia 2 4)
9    

;----------------------------
;----------------------------    

;definir la funcion mediacuadrado que devuelve la media de los cuadrados de a y b
(defun mediaCuadrado (a b) (media (cuadrado a) (cuadrado b)))                                                 
> (mediacuadrado 2 4)                                          
10                                                                       

;----------------------------
;----------------------------    

;definir la función absoluto mediante condicional 'cond'
(defun absolut (a) (cond ((> a 0) a)
			   (t (-a)) ))


;----------------------------
;---------------------------- 

;definir la funcion (nota numero) y visualice la nota correspondiente:
 n<5 'SUSPENSO, n<7 y n>=5 'APROBADO
 n>=7 y n< 9 'NOTABLE y n>=9 0 n<=10 'SOBRESALIENTE
si n>10  'ERROR

(defun nota (n) (cond ((< n 5) 'SUSPENSO)
		      ((< n 7) 'APROBADO)
		      ((< n 9) 'NOTABLE)
		      ((<= n 10) 'SOBRESALIENTE)
		      (t 'ERROR)))

;----------------------------
;---------------------------- 

;definir la funcion 'potencia n1 n2' :
;:Si n1=n2=0 -> devolver el valor indeterminado.
;-Si n1=0, n2!=0 -> devolver 0.
;-Si n1!=0, n2=0 -> devolver 1.

(defun potencia (n1 n2)   (cond                 
                                ((and (= n1 0) (= n2 0)) 'indeterminado)
                                ((= n1 0) 0)                            
                                ((= n2 0) 1)                            
                                (t (* n1 (potencia n1 (- n2 1)))))) 


;///////////////////////////////
;funcion factorial de un numero pasado por parametro
;usando 'dotimes'
;///////////////////////////////
 (defun factorial (a)
 	(setq resultado 1)
 	(dotimes (i a resultado)
 		(setq resultado (* resultado (1+ i)))
 	)

 )

;--------------------------------

;///////////////////////////////
;funcion factorial de un numero pasado por parametro
;usando 'do'
;inicializamos contador = numero y lo vamos decrementando
;///////////////////////////////
(defun factorial2 (num)
	(do
		((contador num (1- contador)) (resultado 1));inicializaciones
		((= contador 1) resultado);condicion de final
		(setq resultado (* resultado contador))
	)
)

;--------------------------------



;///////////////////////////////
;funcion reverse de una lista
;usando 'dotimes'
;de forma iterativa copio el primero de la lista en la 
;nueva lista vacia y actualizo la cabeza de la lista.
;///////////////////////////////
(defun alreves (lista)
	(setq resultado () n (length lista))
	(dotimes (i n resultado)
		(setq resultado (cons (car lista) resultado) lista (cdr lista))
	)
)

;---------------------------------
;///////////////////////////////
;funcion Hello World 
;usando 'read'
;///////////////////////////////
(defun HelloWorld ()
	(pprint "Introduce your name: ")
	(setq aux (read))
	(pprint "Hello World, ")
	(pprint aux)
)
;--------------------------------

;///////////////////////////////
;funcion bucle con cuadrado de un numero 
;usando 'loop & read-char'
;///////////////////////////////

(defun bucle ()
	(loop
		(pprint "Introduce un numero:")
		(setq numero (read))
		(pprint "El cuadrado es:")
		(pprint (* numero numero))
		(pprint "Continuar (S/N)??")
		(setq opcion (read-char))
		(if(equal opcion #\s) 
			(pprint "Continuamos...")
			(return "ADIOS")
		)
	)
)
;--------------------------------

;///////////////////////////////
;funcion longitud: longitud de una lista dada 
;usando 'do'
;///////////////////////////////

(defun longitud (lista) 
	(do ((x lista (cdr x)) (n 0 (1+ n)))
		((null x) n)
	)
)

;///////////////////////////////
;funcion mapcar: aplicar función a todos los elementos
;de una lista
;usando 'mapcar'
;///////////////////////////////

;(mapcar 'factorial '(1 2 3 4))
;> ( 1 2 6 24)

;--------------------------------

;///////////////////////////////
;funcion apply: aplicar operacion a todos los elementos
;de una lista
;usando 'apply'
;///////////////////////////////

;(apply '+ '(1 2 3 4))
;> 10

;--------------------------------

;///////////////////////////////
;funcion norma_vector: devuelve la norma de un vector dado
;norma: raiz de la suma de los cuadrados de sus elementos
;///////////////////////////////
(defun mi_norma_vector (lista)
	(sqrt (apply '+ (mapcar 'cuadrado lista)))

)

(defun cuadrado (a)
	(* a a)
)
;--------------------------------


;///////////////////////////////
;DEFINIR UNA FUNCIÓN calculaCuadrados TAL QUE
;1. LEA UNA EXPRESIÓN s;
;2. SI EL VALOR DE s ES UN NÚMERO n, DEVUELVA EL CUADRADO DE n Y
;VUELVE A 1;
;3. SI EL VALOR DE s NO ES UN NÚMERO, ESCRIBA FIN Y PARE
;///////////////////////////////

(defun calculaCuadrados ()
	(prog (aux)
		ETIQUETA
		(terpri)			;salta linea (newline)
		(princ "EL CUADRADO DE ")
		(setq aux (read))
		(cond	((not (numberp aux)) (princ "FIN") (terpri))
			(t (princ "ES ") (princ (* aux aux)) (terpri) (go ETIQUETA))
		)
	)

)


;--------------------------------

